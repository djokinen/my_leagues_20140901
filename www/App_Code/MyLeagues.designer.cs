#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyLeagues")]
public partial class MyLeaguesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAssociation(Association instance);
  partial void UpdateAssociation(Association instance);
  partial void DeleteAssociation(Association instance);
  partial void InsertTeam(Team instance);
  partial void UpdateTeam(Team instance);
  partial void DeleteTeam(Team instance);
  partial void InsertDivisionSeason(DivisionSeason instance);
  partial void UpdateDivisionSeason(DivisionSeason instance);
  partial void DeleteDivisionSeason(DivisionSeason instance);
  partial void InsertDivisionType(DivisionType instance);
  partial void UpdateDivisionType(DivisionType instance);
  partial void DeleteDivisionType(DivisionType instance);
  partial void InsertField(Field instance);
  partial void UpdateField(Field instance);
  partial void DeleteField(Field instance);
  partial void InsertGame(Game instance);
  partial void UpdateGame(Game instance);
  partial void DeleteGame(Game instance);
  partial void InsertGameScore(GameScore instance);
  partial void UpdateGameScore(GameScore instance);
  partial void DeleteGameScore(GameScore instance);
  partial void InsertLeague(League instance);
  partial void UpdateLeague(League instance);
  partial void DeleteLeague(League instance);
  partial void InsertSeason(Season instance);
  partial void UpdateSeason(Season instance);
  partial void DeleteSeason(Season instance);
  partial void InsertSeasonTeam(SeasonTeam instance);
  partial void UpdateSeasonTeam(SeasonTeam instance);
  partial void DeleteSeasonTeam(SeasonTeam instance);
  partial void InsertSeasonType(SeasonType instance);
  partial void UpdateSeasonType(SeasonType instance);
  partial void DeleteSeasonType(SeasonType instance);
  #endregion
	
	public MyLeaguesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MyLeaguesConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public MyLeaguesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MyLeaguesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MyLeaguesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MyLeaguesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Association> Associations
	{
		get
		{
			return this.GetTable<Association>();
		}
	}
	
	public System.Data.Linq.Table<Team> Teams
	{
		get
		{
			return this.GetTable<Team>();
		}
	}
	
	public System.Data.Linq.Table<DivisionSeason> DivisionSeasons
	{
		get
		{
			return this.GetTable<DivisionSeason>();
		}
	}
	
	public System.Data.Linq.Table<DivisionType> DivisionTypes
	{
		get
		{
			return this.GetTable<DivisionType>();
		}
	}
	
	public System.Data.Linq.Table<Field> Fields
	{
		get
		{
			return this.GetTable<Field>();
		}
	}
	
	public System.Data.Linq.Table<Game> Games
	{
		get
		{
			return this.GetTable<Game>();
		}
	}
	
	public System.Data.Linq.Table<GameScore> GameScores
	{
		get
		{
			return this.GetTable<GameScore>();
		}
	}
	
	public System.Data.Linq.Table<League> Leagues
	{
		get
		{
			return this.GetTable<League>();
		}
	}
	
	public System.Data.Linq.Table<Season> Seasons
	{
		get
		{
			return this.GetTable<Season>();
		}
	}
	
	public System.Data.Linq.Table<SeasonTeam> SeasonTeams
	{
		get
		{
			return this.GetTable<SeasonTeam>();
		}
	}
	
	public System.Data.Linq.Table<SeasonType> SeasonTypes
	{
		get
		{
			return this.GetTable<SeasonType>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Association")]
public partial class Association : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _Website;
	
	private string _Description;
	
	private System.DateTime _Created;
	
	private System.DateTime _Modified;
	
	private bool _Enabled;
	
	private EntitySet<League> _Leagues;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
	
	public Association()
	{
		this._Leagues = new EntitySet<League>(new Action<League>(this.attach_Leagues), new Action<League>(this.detach_Leagues));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(1024)")]
	public string Website
	{
		get
		{
			return this._Website;
		}
		set
		{
			if ((this._Website != value))
			{
				this.OnWebsiteChanging(value);
				this.SendPropertyChanging();
				this._Website = value;
				this.SendPropertyChanged("Website");
				this.OnWebsiteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
	public System.DateTime Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
	public bool Enabled
	{
		get
		{
			return this._Enabled;
		}
		set
		{
			if ((this._Enabled != value))
			{
				this.OnEnabledChanging(value);
				this.SendPropertyChanging();
				this._Enabled = value;
				this.SendPropertyChanged("Enabled");
				this.OnEnabledChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Association_League", Storage="_Leagues", ThisKey="ID", OtherKey="AssociationId")]
	public EntitySet<League> Leagues
	{
		get
		{
			return this._Leagues;
		}
		set
		{
			this._Leagues.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Leagues(League entity)
	{
		this.SendPropertyChanging();
		entity.Association = this;
	}
	
	private void detach_Leagues(League entity)
	{
		this.SendPropertyChanging();
		entity.Association = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Guid _LeagueId;
	
	private string _Name;
	
	private string _Description;
	
	private System.DateTime _Created;
	
	private System.DateTime _Modified;
	
	private bool _Enabled;
	
	private EntitySet<Game> _Games;
	
	private EntitySet<Game> _Games1;
	
	private EntitySet<SeasonTeam> _SeasonTeams;
	
	private EntityRef<League> _League;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnLeagueIdChanging(System.Guid value);
    partial void OnLeagueIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
	
	public Team()
	{
		this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
		this._Games1 = new EntitySet<Game>(new Action<Game>(this.attach_Games1), new Action<Game>(this.detach_Games1));
		this._SeasonTeams = new EntitySet<SeasonTeam>(new Action<SeasonTeam>(this.attach_SeasonTeams), new Action<SeasonTeam>(this.detach_SeasonTeams));
		this._League = default(EntityRef<League>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid LeagueId
	{
		get
		{
			return this._LeagueId;
		}
		set
		{
			if ((this._LeagueId != value))
			{
				if (this._League.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLeagueIdChanging(value);
				this.SendPropertyChanging();
				this._LeagueId = value;
				this.SendPropertyChanged("LeagueId");
				this.OnLeagueIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
	public System.DateTime Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
	public bool Enabled
	{
		get
		{
			return this._Enabled;
		}
		set
		{
			if ((this._Enabled != value))
			{
				this.OnEnabledChanging(value);
				this.SendPropertyChanging();
				this._Enabled = value;
				this.SendPropertyChanged("Enabled");
				this.OnEnabledChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Game", Storage="_Games", ThisKey="ID", OtherKey="TeamIdAway")]
	public EntitySet<Game> Games
	{
		get
		{
			return this._Games;
		}
		set
		{
			this._Games.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Game1", Storage="_Games1", ThisKey="ID", OtherKey="TeamIdHome")]
	public EntitySet<Game> Games1
	{
		get
		{
			return this._Games1;
		}
		set
		{
			this._Games1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_SeasonTeam", Storage="_SeasonTeams", ThisKey="ID", OtherKey="TeamId")]
	public EntitySet<SeasonTeam> SeasonTeams
	{
		get
		{
			return this._SeasonTeams;
		}
		set
		{
			this._SeasonTeams.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_Team", Storage="_League", ThisKey="LeagueId", OtherKey="ID", IsForeignKey=true)]
	public League League
	{
		get
		{
			return this._League.Entity;
		}
		set
		{
			League previousValue = this._League.Entity;
			if (((previousValue != value) 
						|| (this._League.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._League.Entity = null;
					previousValue.Teams.Remove(this);
				}
				this._League.Entity = value;
				if ((value != null))
				{
					value.Teams.Add(this);
					this._LeagueId = value.ID;
				}
				else
				{
					this._LeagueId = default(System.Guid);
				}
				this.SendPropertyChanged("League");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Games(Game entity)
	{
		this.SendPropertyChanging();
		entity.Team = this;
	}
	
	private void detach_Games(Game entity)
	{
		this.SendPropertyChanging();
		entity.Team = null;
	}
	
	private void attach_Games1(Game entity)
	{
		this.SendPropertyChanging();
		entity.Team1 = this;
	}
	
	private void detach_Games1(Game entity)
	{
		this.SendPropertyChanging();
		entity.Team1 = null;
	}
	
	private void attach_SeasonTeams(SeasonTeam entity)
	{
		this.SendPropertyChanging();
		entity.Team = this;
	}
	
	private void detach_SeasonTeams(SeasonTeam entity)
	{
		this.SendPropertyChanging();
		entity.Team = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DivisionSeason")]
public partial class DivisionSeason : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _DivisionId;
	
	private System.Guid _SeasonId;
	
	private string _Description;
	
	private System.DateTime _Created;
	
	private EntityRef<Season> _Season;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDivisionIdChanging(System.Guid value);
    partial void OnDivisionIdChanged();
    partial void OnSeasonIdChanging(System.Guid value);
    partial void OnSeasonIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
	
	public DivisionSeason()
	{
		this._Season = default(EntityRef<Season>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid DivisionId
	{
		get
		{
			return this._DivisionId;
		}
		set
		{
			if ((this._DivisionId != value))
			{
				this.OnDivisionIdChanging(value);
				this.SendPropertyChanging();
				this._DivisionId = value;
				this.SendPropertyChanged("DivisionId");
				this.OnDivisionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid SeasonId
	{
		get
		{
			return this._SeasonId;
		}
		set
		{
			if ((this._SeasonId != value))
			{
				if (this._Season.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSeasonIdChanging(value);
				this.SendPropertyChanging();
				this._SeasonId = value;
				this.SendPropertyChanged("SeasonId");
				this.OnSeasonIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_DivisionSeason", Storage="_Season", ThisKey="SeasonId", OtherKey="ID", IsForeignKey=true)]
	public Season Season
	{
		get
		{
			return this._Season.Entity;
		}
		set
		{
			Season previousValue = this._Season.Entity;
			if (((previousValue != value) 
						|| (this._Season.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Season.Entity = null;
					previousValue.DivisionSeasons.Remove(this);
				}
				this._Season.Entity = value;
				if ((value != null))
				{
					value.DivisionSeasons.Add(this);
					this._SeasonId = value.ID;
				}
				else
				{
					this._SeasonId = default(System.Guid);
				}
				this.SendPropertyChanged("Season");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DivisionType")]
public partial class DivisionType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Guid _LeagueId;
	
	private string _Name;
	
	private string _Description;
	
	private System.DateTime _Created;
	
	private System.DateTime _Modified;
	
	private bool _Enabled;
	
	private EntitySet<Season> _Seasons;
	
	private EntityRef<League> _League;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnLeagueIdChanging(System.Guid value);
    partial void OnLeagueIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
	
	public DivisionType()
	{
		this._Seasons = new EntitySet<Season>(new Action<Season>(this.attach_Seasons), new Action<Season>(this.detach_Seasons));
		this._League = default(EntityRef<League>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid LeagueId
	{
		get
		{
			return this._LeagueId;
		}
		set
		{
			if ((this._LeagueId != value))
			{
				if (this._League.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLeagueIdChanging(value);
				this.SendPropertyChanging();
				this._LeagueId = value;
				this.SendPropertyChanged("LeagueId");
				this.OnLeagueIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
	public System.DateTime Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
	public bool Enabled
	{
		get
		{
			return this._Enabled;
		}
		set
		{
			if ((this._Enabled != value))
			{
				this.OnEnabledChanging(value);
				this.SendPropertyChanging();
				this._Enabled = value;
				this.SendPropertyChanged("Enabled");
				this.OnEnabledChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DivisionType_Season", Storage="_Seasons", ThisKey="ID", OtherKey="DivisionTypeId")]
	public EntitySet<Season> Seasons
	{
		get
		{
			return this._Seasons;
		}
		set
		{
			this._Seasons.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_DivisionType", Storage="_League", ThisKey="LeagueId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public League League
	{
		get
		{
			return this._League.Entity;
		}
		set
		{
			League previousValue = this._League.Entity;
			if (((previousValue != value) 
						|| (this._League.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._League.Entity = null;
					previousValue.DivisionTypes.Remove(this);
				}
				this._League.Entity = value;
				if ((value != null))
				{
					value.DivisionTypes.Add(this);
					this._LeagueId = value.ID;
				}
				else
				{
					this._LeagueId = default(System.Guid);
				}
				this.SendPropertyChanged("League");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Seasons(Season entity)
	{
		this.SendPropertyChanging();
		entity.DivisionType = this;
	}
	
	private void detach_Seasons(Season entity)
	{
		this.SendPropertyChanging();
		entity.DivisionType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Field")]
public partial class Field : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _Description;
	
	private System.DateTime _Created;
	
	private System.DateTime _Modified;
	
	private bool _Enabled;
	
	private EntitySet<Game> _Games;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
	
	public Field()
	{
		this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
	public System.DateTime Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
	public bool Enabled
	{
		get
		{
			return this._Enabled;
		}
		set
		{
			if ((this._Enabled != value))
			{
				this.OnEnabledChanging(value);
				this.SendPropertyChanging();
				this._Enabled = value;
				this.SendPropertyChanged("Enabled");
				this.OnEnabledChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_Game", Storage="_Games", ThisKey="ID", OtherKey="FieldId")]
	public EntitySet<Game> Games
	{
		get
		{
			return this._Games;
		}
		set
		{
			this._Games.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Games(Game entity)
	{
		this.SendPropertyChanging();
		entity.Field = this;
	}
	
	private void detach_Games(Game entity)
	{
		this.SendPropertyChanging();
		entity.Field = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Guid _TeamIdHome;
	
	private System.Guid _TeamIdAway;
	
	private System.DateTime _GameDateTime;
	
	private System.Guid _FieldId;
	
	private string _Description;
	
	private System.DateTime _Created;
	
	private System.DateTime _Modified;
	
	private bool _Enabled;
	
	private EntityRef<GameScore> _GameScore;
	
	private EntityRef<Field> _Field;
	
	private EntityRef<Team> _Team;
	
	private EntityRef<Team> _Team1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTeamIdHomeChanging(System.Guid value);
    partial void OnTeamIdHomeChanged();
    partial void OnTeamIdAwayChanging(System.Guid value);
    partial void OnTeamIdAwayChanged();
    partial void OnGameDateTimeChanging(System.DateTime value);
    partial void OnGameDateTimeChanged();
    partial void OnFieldIdChanging(System.Guid value);
    partial void OnFieldIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
	
	public Game()
	{
		this._GameScore = default(EntityRef<GameScore>);
		this._Field = default(EntityRef<Field>);
		this._Team = default(EntityRef<Team>);
		this._Team1 = default(EntityRef<Team>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamIdHome", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid TeamIdHome
	{
		get
		{
			return this._TeamIdHome;
		}
		set
		{
			if ((this._TeamIdHome != value))
			{
				if (this._Team1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTeamIdHomeChanging(value);
				this.SendPropertyChanging();
				this._TeamIdHome = value;
				this.SendPropertyChanged("TeamIdHome");
				this.OnTeamIdHomeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamIdAway", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid TeamIdAway
	{
		get
		{
			return this._TeamIdAway;
		}
		set
		{
			if ((this._TeamIdAway != value))
			{
				if (this._Team.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTeamIdAwayChanging(value);
				this.SendPropertyChanging();
				this._TeamIdAway = value;
				this.SendPropertyChanged("TeamIdAway");
				this.OnTeamIdAwayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameDateTime", DbType="DateTime NOT NULL")]
	public System.DateTime GameDateTime
	{
		get
		{
			return this._GameDateTime;
		}
		set
		{
			if ((this._GameDateTime != value))
			{
				this.OnGameDateTimeChanging(value);
				this.SendPropertyChanging();
				this._GameDateTime = value;
				this.SendPropertyChanged("GameDateTime");
				this.OnGameDateTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid FieldId
	{
		get
		{
			return this._FieldId;
		}
		set
		{
			if ((this._FieldId != value))
			{
				if (this._Field.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFieldIdChanging(value);
				this.SendPropertyChanging();
				this._FieldId = value;
				this.SendPropertyChanged("FieldId");
				this.OnFieldIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
	public System.DateTime Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
	public bool Enabled
	{
		get
		{
			return this._Enabled;
		}
		set
		{
			if ((this._Enabled != value))
			{
				this.OnEnabledChanging(value);
				this.SendPropertyChanging();
				this._Enabled = value;
				this.SendPropertyChanged("Enabled");
				this.OnEnabledChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_GameScore", Storage="_GameScore", ThisKey="ID", OtherKey="GameId", IsUnique=true, IsForeignKey=false)]
	public GameScore GameScore
	{
		get
		{
			return this._GameScore.Entity;
		}
		set
		{
			GameScore previousValue = this._GameScore.Entity;
			if (((previousValue != value) 
						|| (this._GameScore.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._GameScore.Entity = null;
					previousValue.Game = null;
				}
				this._GameScore.Entity = value;
				if ((value != null))
				{
					value.Game = this;
				}
				this.SendPropertyChanged("GameScore");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_Game", Storage="_Field", ThisKey="FieldId", OtherKey="ID", IsForeignKey=true)]
	public Field Field
	{
		get
		{
			return this._Field.Entity;
		}
		set
		{
			Field previousValue = this._Field.Entity;
			if (((previousValue != value) 
						|| (this._Field.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Field.Entity = null;
					previousValue.Games.Remove(this);
				}
				this._Field.Entity = value;
				if ((value != null))
				{
					value.Games.Add(this);
					this._FieldId = value.ID;
				}
				else
				{
					this._FieldId = default(System.Guid);
				}
				this.SendPropertyChanged("Field");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Game", Storage="_Team", ThisKey="TeamIdAway", OtherKey="ID", IsForeignKey=true)]
	public Team Team
	{
		get
		{
			return this._Team.Entity;
		}
		set
		{
			Team previousValue = this._Team.Entity;
			if (((previousValue != value) 
						|| (this._Team.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Team.Entity = null;
					previousValue.Games.Remove(this);
				}
				this._Team.Entity = value;
				if ((value != null))
				{
					value.Games.Add(this);
					this._TeamIdAway = value.ID;
				}
				else
				{
					this._TeamIdAway = default(System.Guid);
				}
				this.SendPropertyChanged("Team");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Game1", Storage="_Team1", ThisKey="TeamIdHome", OtherKey="ID", IsForeignKey=true)]
	public Team Team1
	{
		get
		{
			return this._Team1.Entity;
		}
		set
		{
			Team previousValue = this._Team1.Entity;
			if (((previousValue != value) 
						|| (this._Team1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Team1.Entity = null;
					previousValue.Games1.Remove(this);
				}
				this._Team1.Entity = value;
				if ((value != null))
				{
					value.Games1.Add(this);
					this._TeamIdHome = value.ID;
				}
				else
				{
					this._TeamIdHome = default(System.Guid);
				}
				this.SendPropertyChanged("Team1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameScore")]
public partial class GameScore : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _GameId;
	
	private int _ScoreHome;
	
	private int _ScoreAway;
	
	private string _Description;
	
	private System.DateTime _Created;
	
	private System.DateTime _Modified;
	
	private bool _Enabled;
	
	private EntityRef<Game> _Game;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIdChanging(System.Guid value);
    partial void OnGameIdChanged();
    partial void OnScoreHomeChanging(int value);
    partial void OnScoreHomeChanged();
    partial void OnScoreAwayChanging(int value);
    partial void OnScoreAwayChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
	
	public GameScore()
	{
		this._Game = default(EntityRef<Game>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid GameId
	{
		get
		{
			return this._GameId;
		}
		set
		{
			if ((this._GameId != value))
			{
				if (this._Game.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGameIdChanging(value);
				this.SendPropertyChanging();
				this._GameId = value;
				this.SendPropertyChanged("GameId");
				this.OnGameIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreHome", DbType="Int NOT NULL")]
	public int ScoreHome
	{
		get
		{
			return this._ScoreHome;
		}
		set
		{
			if ((this._ScoreHome != value))
			{
				this.OnScoreHomeChanging(value);
				this.SendPropertyChanging();
				this._ScoreHome = value;
				this.SendPropertyChanged("ScoreHome");
				this.OnScoreHomeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreAway", DbType="Int NOT NULL")]
	public int ScoreAway
	{
		get
		{
			return this._ScoreAway;
		}
		set
		{
			if ((this._ScoreAway != value))
			{
				this.OnScoreAwayChanging(value);
				this.SendPropertyChanging();
				this._ScoreAway = value;
				this.SendPropertyChanged("ScoreAway");
				this.OnScoreAwayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
	public System.DateTime Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
	public bool Enabled
	{
		get
		{
			return this._Enabled;
		}
		set
		{
			if ((this._Enabled != value))
			{
				this.OnEnabledChanging(value);
				this.SendPropertyChanging();
				this._Enabled = value;
				this.SendPropertyChanged("Enabled");
				this.OnEnabledChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_GameScore", Storage="_Game", ThisKey="GameId", OtherKey="ID", IsForeignKey=true)]
	public Game Game
	{
		get
		{
			return this._Game.Entity;
		}
		set
		{
			Game previousValue = this._Game.Entity;
			if (((previousValue != value) 
						|| (this._Game.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Game.Entity = null;
					previousValue.GameScore = null;
				}
				this._Game.Entity = value;
				if ((value != null))
				{
					value.GameScore = this;
					this._GameId = value.ID;
				}
				else
				{
					this._GameId = default(System.Guid);
				}
				this.SendPropertyChanged("Game");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.League")]
public partial class League : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Guid _AssociationId;
	
	private string _Name;
	
	private string _Website;
	
	private string _Description;
	
	private System.DateTime _Created;
	
	private System.DateTime _Modified;
	
	private bool _Enabled;
	
	private EntitySet<Team> _Teams;
	
	private EntitySet<DivisionType> _DivisionTypes;
	
	private EntitySet<SeasonType> _SeasonTypes;
	
	private EntityRef<Association> _Association;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnAssociationIdChanging(System.Guid value);
    partial void OnAssociationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
	
	public League()
	{
		this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
		this._DivisionTypes = new EntitySet<DivisionType>(new Action<DivisionType>(this.attach_DivisionTypes), new Action<DivisionType>(this.detach_DivisionTypes));
		this._SeasonTypes = new EntitySet<SeasonType>(new Action<SeasonType>(this.attach_SeasonTypes), new Action<SeasonType>(this.detach_SeasonTypes));
		this._Association = default(EntityRef<Association>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid AssociationId
	{
		get
		{
			return this._AssociationId;
		}
		set
		{
			if ((this._AssociationId != value))
			{
				if (this._Association.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAssociationIdChanging(value);
				this.SendPropertyChanging();
				this._AssociationId = value;
				this.SendPropertyChanged("AssociationId");
				this.OnAssociationIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(1024)")]
	public string Website
	{
		get
		{
			return this._Website;
		}
		set
		{
			if ((this._Website != value))
			{
				this.OnWebsiteChanging(value);
				this.SendPropertyChanging();
				this._Website = value;
				this.SendPropertyChanged("Website");
				this.OnWebsiteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
	public System.DateTime Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
	public bool Enabled
	{
		get
		{
			return this._Enabled;
		}
		set
		{
			if ((this._Enabled != value))
			{
				this.OnEnabledChanging(value);
				this.SendPropertyChanging();
				this._Enabled = value;
				this.SendPropertyChanged("Enabled");
				this.OnEnabledChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_Team", Storage="_Teams", ThisKey="ID", OtherKey="LeagueId")]
	public EntitySet<Team> Teams
	{
		get
		{
			return this._Teams;
		}
		set
		{
			this._Teams.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_DivisionType", Storage="_DivisionTypes", ThisKey="ID", OtherKey="LeagueId")]
	public EntitySet<DivisionType> DivisionTypes
	{
		get
		{
			return this._DivisionTypes;
		}
		set
		{
			this._DivisionTypes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_SeasonType", Storage="_SeasonTypes", ThisKey="ID", OtherKey="LeagueId")]
	public EntitySet<SeasonType> SeasonTypes
	{
		get
		{
			return this._SeasonTypes;
		}
		set
		{
			this._SeasonTypes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Association_League", Storage="_Association", ThisKey="AssociationId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Association Association
	{
		get
		{
			return this._Association.Entity;
		}
		set
		{
			Association previousValue = this._Association.Entity;
			if (((previousValue != value) 
						|| (this._Association.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Association.Entity = null;
					previousValue.Leagues.Remove(this);
				}
				this._Association.Entity = value;
				if ((value != null))
				{
					value.Leagues.Add(this);
					this._AssociationId = value.ID;
				}
				else
				{
					this._AssociationId = default(System.Guid);
				}
				this.SendPropertyChanged("Association");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Teams(Team entity)
	{
		this.SendPropertyChanging();
		entity.League = this;
	}
	
	private void detach_Teams(Team entity)
	{
		this.SendPropertyChanging();
		entity.League = null;
	}
	
	private void attach_DivisionTypes(DivisionType entity)
	{
		this.SendPropertyChanging();
		entity.League = this;
	}
	
	private void detach_DivisionTypes(DivisionType entity)
	{
		this.SendPropertyChanging();
		entity.League = null;
	}
	
	private void attach_SeasonTypes(SeasonType entity)
	{
		this.SendPropertyChanging();
		entity.League = this;
	}
	
	private void detach_SeasonTypes(SeasonType entity)
	{
		this.SendPropertyChanging();
		entity.League = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Season")]
public partial class Season : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Guid _DivisionTypeId;
	
	private System.Guid _SeasonTypeId;
	
	private System.DateTime _StartDate;
	
	private System.DateTime _EndDate;
	
	private string _Description;
	
	private System.DateTime _Created;
	
	private System.DateTime _Modified;
	
	private bool _Enabled;
	
	private EntitySet<DivisionSeason> _DivisionSeasons;
	
	private EntitySet<SeasonTeam> _SeasonTeams;
	
	private EntityRef<DivisionType> _DivisionType;
	
	private EntityRef<SeasonType> _SeasonType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnDivisionTypeIdChanging(System.Guid value);
    partial void OnDivisionTypeIdChanged();
    partial void OnSeasonTypeIdChanging(System.Guid value);
    partial void OnSeasonTypeIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
	
	public Season()
	{
		this._DivisionSeasons = new EntitySet<DivisionSeason>(new Action<DivisionSeason>(this.attach_DivisionSeasons), new Action<DivisionSeason>(this.detach_DivisionSeasons));
		this._SeasonTeams = new EntitySet<SeasonTeam>(new Action<SeasonTeam>(this.attach_SeasonTeams), new Action<SeasonTeam>(this.detach_SeasonTeams));
		this._DivisionType = default(EntityRef<DivisionType>);
		this._SeasonType = default(EntityRef<SeasonType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionTypeId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid DivisionTypeId
	{
		get
		{
			return this._DivisionTypeId;
		}
		set
		{
			if ((this._DivisionTypeId != value))
			{
				if (this._DivisionType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDivisionTypeIdChanging(value);
				this.SendPropertyChanging();
				this._DivisionTypeId = value;
				this.SendPropertyChanged("DivisionTypeId");
				this.OnDivisionTypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonTypeId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid SeasonTypeId
	{
		get
		{
			return this._SeasonTypeId;
		}
		set
		{
			if ((this._SeasonTypeId != value))
			{
				if (this._SeasonType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSeasonTypeIdChanging(value);
				this.SendPropertyChanging();
				this._SeasonTypeId = value;
				this.SendPropertyChanged("SeasonTypeId");
				this.OnSeasonTypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
	public System.DateTime StartDate
	{
		get
		{
			return this._StartDate;
		}
		set
		{
			if ((this._StartDate != value))
			{
				this.OnStartDateChanging(value);
				this.SendPropertyChanging();
				this._StartDate = value;
				this.SendPropertyChanged("StartDate");
				this.OnStartDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
	public System.DateTime EndDate
	{
		get
		{
			return this._EndDate;
		}
		set
		{
			if ((this._EndDate != value))
			{
				this.OnEndDateChanging(value);
				this.SendPropertyChanging();
				this._EndDate = value;
				this.SendPropertyChanged("EndDate");
				this.OnEndDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
	public System.DateTime Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
	public bool Enabled
	{
		get
		{
			return this._Enabled;
		}
		set
		{
			if ((this._Enabled != value))
			{
				this.OnEnabledChanging(value);
				this.SendPropertyChanging();
				this._Enabled = value;
				this.SendPropertyChanged("Enabled");
				this.OnEnabledChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_DivisionSeason", Storage="_DivisionSeasons", ThisKey="ID", OtherKey="SeasonId")]
	public EntitySet<DivisionSeason> DivisionSeasons
	{
		get
		{
			return this._DivisionSeasons;
		}
		set
		{
			this._DivisionSeasons.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_SeasonTeam", Storage="_SeasonTeams", ThisKey="ID", OtherKey="SeasonId")]
	public EntitySet<SeasonTeam> SeasonTeams
	{
		get
		{
			return this._SeasonTeams;
		}
		set
		{
			this._SeasonTeams.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DivisionType_Season", Storage="_DivisionType", ThisKey="DivisionTypeId", OtherKey="ID", IsForeignKey=true)]
	public DivisionType DivisionType
	{
		get
		{
			return this._DivisionType.Entity;
		}
		set
		{
			DivisionType previousValue = this._DivisionType.Entity;
			if (((previousValue != value) 
						|| (this._DivisionType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DivisionType.Entity = null;
					previousValue.Seasons.Remove(this);
				}
				this._DivisionType.Entity = value;
				if ((value != null))
				{
					value.Seasons.Add(this);
					this._DivisionTypeId = value.ID;
				}
				else
				{
					this._DivisionTypeId = default(System.Guid);
				}
				this.SendPropertyChanged("DivisionType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SeasonType_Season", Storage="_SeasonType", ThisKey="SeasonTypeId", OtherKey="ID", IsForeignKey=true)]
	public SeasonType SeasonType
	{
		get
		{
			return this._SeasonType.Entity;
		}
		set
		{
			SeasonType previousValue = this._SeasonType.Entity;
			if (((previousValue != value) 
						|| (this._SeasonType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SeasonType.Entity = null;
					previousValue.Seasons.Remove(this);
				}
				this._SeasonType.Entity = value;
				if ((value != null))
				{
					value.Seasons.Add(this);
					this._SeasonTypeId = value.ID;
				}
				else
				{
					this._SeasonTypeId = default(System.Guid);
				}
				this.SendPropertyChanged("SeasonType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DivisionSeasons(DivisionSeason entity)
	{
		this.SendPropertyChanging();
		entity.Season = this;
	}
	
	private void detach_DivisionSeasons(DivisionSeason entity)
	{
		this.SendPropertyChanging();
		entity.Season = null;
	}
	
	private void attach_SeasonTeams(SeasonTeam entity)
	{
		this.SendPropertyChanging();
		entity.Season = this;
	}
	
	private void detach_SeasonTeams(SeasonTeam entity)
	{
		this.SendPropertyChanging();
		entity.Season = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SeasonTeam")]
public partial class SeasonTeam : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _SeasonId;
	
	private System.Guid _TeamId;
	
	private System.DateTime _Created;
	
	private EntityRef<Season> _Season;
	
	private EntityRef<Team> _Team;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeasonIdChanging(System.Guid value);
    partial void OnSeasonIdChanged();
    partial void OnTeamIdChanging(System.Guid value);
    partial void OnTeamIdChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
	
	public SeasonTeam()
	{
		this._Season = default(EntityRef<Season>);
		this._Team = default(EntityRef<Team>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid SeasonId
	{
		get
		{
			return this._SeasonId;
		}
		set
		{
			if ((this._SeasonId != value))
			{
				if (this._Season.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSeasonIdChanging(value);
				this.SendPropertyChanging();
				this._SeasonId = value;
				this.SendPropertyChanged("SeasonId");
				this.OnSeasonIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid TeamId
	{
		get
		{
			return this._TeamId;
		}
		set
		{
			if ((this._TeamId != value))
			{
				if (this._Team.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTeamIdChanging(value);
				this.SendPropertyChanging();
				this._TeamId = value;
				this.SendPropertyChanged("TeamId");
				this.OnTeamIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_SeasonTeam", Storage="_Season", ThisKey="SeasonId", OtherKey="ID", IsForeignKey=true)]
	public Season Season
	{
		get
		{
			return this._Season.Entity;
		}
		set
		{
			Season previousValue = this._Season.Entity;
			if (((previousValue != value) 
						|| (this._Season.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Season.Entity = null;
					previousValue.SeasonTeams.Remove(this);
				}
				this._Season.Entity = value;
				if ((value != null))
				{
					value.SeasonTeams.Add(this);
					this._SeasonId = value.ID;
				}
				else
				{
					this._SeasonId = default(System.Guid);
				}
				this.SendPropertyChanged("Season");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_SeasonTeam", Storage="_Team", ThisKey="TeamId", OtherKey="ID", IsForeignKey=true)]
	public Team Team
	{
		get
		{
			return this._Team.Entity;
		}
		set
		{
			Team previousValue = this._Team.Entity;
			if (((previousValue != value) 
						|| (this._Team.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Team.Entity = null;
					previousValue.SeasonTeams.Remove(this);
				}
				this._Team.Entity = value;
				if ((value != null))
				{
					value.SeasonTeams.Add(this);
					this._TeamId = value.ID;
				}
				else
				{
					this._TeamId = default(System.Guid);
				}
				this.SendPropertyChanged("Team");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SeasonType")]
public partial class SeasonType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Guid _LeagueId;
	
	private string _Name;
	
	private string _Description;
	
	private System.DateTime _Created;
	
	private System.DateTime _Modified;
	
	private bool _Enabled;
	
	private EntitySet<Season> _Seasons;
	
	private EntityRef<League> _League;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnLeagueIdChanging(System.Guid value);
    partial void OnLeagueIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
	
	public SeasonType()
	{
		this._Seasons = new EntitySet<Season>(new Action<Season>(this.attach_Seasons), new Action<Season>(this.detach_Seasons));
		this._League = default(EntityRef<League>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid LeagueId
	{
		get
		{
			return this._LeagueId;
		}
		set
		{
			if ((this._LeagueId != value))
			{
				if (this._League.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLeagueIdChanging(value);
				this.SendPropertyChanging();
				this._LeagueId = value;
				this.SendPropertyChanged("LeagueId");
				this.OnLeagueIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
	public System.DateTime Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
	public bool Enabled
	{
		get
		{
			return this._Enabled;
		}
		set
		{
			if ((this._Enabled != value))
			{
				this.OnEnabledChanging(value);
				this.SendPropertyChanging();
				this._Enabled = value;
				this.SendPropertyChanged("Enabled");
				this.OnEnabledChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SeasonType_Season", Storage="_Seasons", ThisKey="ID", OtherKey="SeasonTypeId")]
	public EntitySet<Season> Seasons
	{
		get
		{
			return this._Seasons;
		}
		set
		{
			this._Seasons.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_SeasonType", Storage="_League", ThisKey="LeagueId", OtherKey="ID", IsForeignKey=true)]
	public League League
	{
		get
		{
			return this._League.Entity;
		}
		set
		{
			League previousValue = this._League.Entity;
			if (((previousValue != value) 
						|| (this._League.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._League.Entity = null;
					previousValue.SeasonTypes.Remove(this);
				}
				this._League.Entity = value;
				if ((value != null))
				{
					value.SeasonTypes.Add(this);
					this._LeagueId = value.ID;
				}
				else
				{
					this._LeagueId = default(System.Guid);
				}
				this.SendPropertyChanged("League");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Seasons(Season entity)
	{
		this.SendPropertyChanging();
		entity.SeasonType = this;
	}
	
	private void detach_Seasons(Season entity)
	{
		this.SendPropertyChanging();
		entity.SeasonType = null;
	}
}
#pragma warning restore 1591
